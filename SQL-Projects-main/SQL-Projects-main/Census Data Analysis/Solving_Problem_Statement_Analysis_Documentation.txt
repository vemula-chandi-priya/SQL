
# SQL Analysis Documentation: Solving Problem Statement with Data Analysis

## Overview
This document provides a comprehensive explanation of the SQL queries used to analyze demographic and literacy data.
The script employs advanced SQL techniques such as joins, derived formulas, and window functions to address various
analytical objectives.

## Sections of Analysis

### 1. **Data Exploration**
- Queries to inspect the contents of two datasets:
    ```sql
    SELECT * FROM project..Data1;
    SELECT * FROM project..Data2;
    ```

### 2. **Gender and Population Analysis**
- **Objective**: Calculate the male and female population based on population size and sex ratio.
- **Key Formulas**:
    - `Females / Males = Sex_Ratio`
    - Derived:
        - `Males = Population / (Sex_Ratio + 1)`
        - `Females = Population - Males`
- **Implementation**:
    - At the district level:
        ```sql
        SELECT District, State, ROUND(Population / (Sex_Ratio + 1), 0) AS Male,
               ROUND(Population - Population / (Sex_Ratio + 1), 0) AS Female
        FROM Gender_Ratio;
        ```
    - At the state level (aggregated):
        ```sql
        SELECT State, SUM(Male) AS Total_Male, SUM(Female) AS Total_Female
        FROM State_Level GROUP BY State;
        ```

### 3. **Literacy Distribution**
- **Objective**: Compute literate and illiterate populations using the literacy ratio.
- **Key Formulas**:
    - `Total_Literate = Literacy_Ratio * Population`
    - `Total_Illiterate = (1 - Literacy_Ratio) * Population`
- **Implementation**:
    - At the district level:
        ```sql
        SELECT District, State, ROUND(Literacy_Ratio * Population, 0) AS Literate,
               ROUND((1 - Literacy_Ratio) * Population, 0) AS Illiterate
        FROM Literacy_Distribution;
        ```
    - At the state level:
        ```sql
        SELECT State, SUM(Literate) AS Total_Literate_Population,
               SUM(Illiterate) AS Total_Illiterate_Population
        FROM State_Level GROUP BY State;
        ```

### 4. **Census Comparisons**
- **Objective**: Analyze growth trends by comparing current and previous census data.
- **Key Formula**:
    - `Previous_Census = Population / (1 + Growth_Ratio)`
- **Implementation**:
    - District-level calculation:
        ```sql
        SELECT District, State, ROUND(Population / (1 + Growth_Ratio), 0) AS Previous_Census
        FROM Census;
        ```
    - Aggregated state-level data:
        ```sql
        SELECT State, SUM(Previous_Census) AS Previous_Census,
               SUM(Current_Census) AS Current_Census FROM State_Level;
        ```
    - National population:
        ```sql
        SELECT SUM(Previous_Census) AS Previous_Census, SUM(Current_Census) AS Current_Census
        FROM India;
        ```

### 5. **Population vs. Area**
- **Objective**: Calculate population density using census data and total area.
- **Key Steps**:
    - Assign a common key to census and area datasets:
        ```sql
        SELECT '1' AS Key, SUM(Area_km2) AS Total_Area FROM project..Data2;
        ```
    - Join the datasets and calculate densities:
        ```sql
        SELECT (Total_Area / Previous_Census) AS Previous_Census_Population,
               (Total_Area / Current_Census) AS Current_Census_Population
        FROM Decreased_Area;
        ```

### 6. **Window Functions for Literacy Rates**
- **Objective**: Identify districts with top and bottom literacy rates within each state.
- **Implementation**:
    - Top 3 districts:
        ```sql
        SELECT State, District, Literacy, RANK() OVER (PARTITION BY State ORDER BY Literacy DESC) AS Ranks
        FROM project..Data1 WHERE Ranks <= 3;
        ```
    - Bottom 3 districts:
        ```sql
        SELECT State, District, Literacy, RANK() OVER (PARTITION BY State ORDER BY Literacy ASC) AS Ranks
        FROM project..Data1 WHERE Ranks <= 3;
        ```
    - Combine results for top and bottom:
        ```sql
        SELECT State, District, Literacy, 'Top' AS Rank_Type FROM Highest
        UNION ALL
        SELECT State, District, Literacy, 'Bottom' AS Rank_Type FROM Lowest;
        ```

## Recommendations
- Validate the data consistency (e.g., ensure no null or invalid values in `Population` or `Sex_Ratio` columns).
- Incorporate visualization tools for deeper insights into the results (e.g., heatmaps, bar charts).
- Extend analysis to include additional demographic factors like age distribution.

---
This documentation aims to provide a clear understanding of the SQL file's logic and its application in solving the problem statement.
